* What Is Computing

Part of the [[https://github.com/GregDavidson/computing-magic#readme][Computing Magic]] Curriculum.

** Data vs. Meaningful Information

To a binary computer, everything is just /data/, i.e. sequences of 0's and 1's
grouped into various chunks for processing by various hardware mechanisms.

Read [[https://gregdavidson.github.io/on-computing/what-computers-are][What Computers Are]] now!

In contrast, humans see /Information/ which has /Meaning/ within a /Context/
called a /Domain/ Examples of Domains include
- Financial Accounting
- Playing Chess
- Rendering 3D Virtual Worlds
- Understanding human language
- and so on, ad infinitum

Domains have no objective existence, they exist only as an interpretation which
human beings create according to their needs and interests.

** Representation and Processing

Computing has two fundamental aspects:
- Representation :: how to effectively and efficiently express domain
  information as data
- Processing :: how to process that data effectively and efficiently using
  sequences of machine instructions.

Notice the use of the words /effectively/ and /efficiently/ in both parts
- Representation and Processing are intertwined
- Effectiveness is about correctness
      - Do we get correct answers and behavior?
- Efficiency is necessary in practice
      - Many known effective procedures require excessive resources
            - More memory than is available or affordable
            - More processing time than is available or useful
            - What use to predict tomorrow's weather by next year?
- A good representation aids efficiency
      - E.g. a chess board could be represented as
            - An image from a camera
            - An 8x8 matrix of the locations of the chess pieces
            - A list of openings and threats for each piece
            - Etc.
            - Which of these would be help in playing a good game?
            - How could these representations be achieved?
            - What other representations might be helpful?

** High-Level Programming

/Information/ is /Data/ which has /Meaning/ in a /Domain/
- A picture of a chessboard is just meaningless bits to a computer
- In the domain of chess, it represents an arrangement of chess pieces

Meaning only exists for human beings. It's what allows us to understand things.
Computers systems can be designed to act /as if/ they understand things in /very
limited contexts/, but they don't actually understand anything!

In conventional computer programming, the knowledge and understanding which the
programmer used to design the computer system is /implicit/ in the program. The
computer mindlessly executes the program and if it doesn't do what the
programmer intended, we say "it has a bug" and an expert human programmer has to
analyze the program and "fix the bug". The gap between human understanding and
the structure of code is often so large that it's easier to just delete buggy
code and design new code from scratch.

There are a variety of advanced and rather magical computing techniques which allow
knowledge to be represented /explicitly/ in a computer system.

1. Use a High-Level Computer Language
       - A HLL allows programmers to describe their programs in human concepts,
         i.e. as meaningful operations on meaningful information. A /compiler/
         or /interpreter/ program /translates/ HLL expressions into
         machine-level data and instructions which the programmer usually does
         not need to see.
       - There are many creative ways which human beings have learned to think
         about computation, called [[https://en.wikipedia.org/wiki/Programming_paradigm][Programming Paradigms]]. The choice of
         Programming Paradigms can make an enormous difference in the experience
         and quality of solving challenging problems.
       - There are now a [[https://en.wikipedia.org/wiki/Programming_language][wide variety of HLLs]] available to modern programmers.
             - and [[file:languages-which-matter.org][Choice of Language Matters!]]
       - There are some powerful knowledge-based tools which can assist
         programmers in developing programs in some HLLs.
2. Use a Specification Language
       - A Specification Language can express how humans want a program to
         behave using higher-level terms than we know how to write efficient
         /compilers/ and /interpreters/ for. Instead, a human programmer will
         write a HLL program which will fulfill the specification. This is a
         highly creative art. It is even possible to generate that HLL program
         along with a mathematical proof that the HLL program will faithfully
         implement the specification. This is an highly skilled creative act.
       - There are some powerful Software Tools which can greatly assist
         expert human programmers with these challenging skills.
3. Use automated reasoning techniques to act intelligently according to explicit
   knowledge.
       - Getting this to work efficiently enough can be very challenging!
4. Use a combination of the above approaches!

   routine and boring parts of their work.
6. This will greatly increase the productivity and satisfaction of those human
   experts!
You can apply this strategy to programming (including AI development) itself.
- Automate away the boring parts of software development!

** What is AI Programming?

For the Big Picture, please read [[https://github.com/GregDavidson/computing-magic/blob/main/Modules/Module-7/ai-overview.org][Overview of AI Programming]]

In brief:

- All Computer Programming uses Procedures
      - Organized sequences of Instructions to the Computer
      - Also known as /Functions/, /Methods/, /Subroutines/
- Conventional Programming uses Algorithms
      - Algorithms are Procedures
            - guaranteed to always correctly solve a specified problem
            - often guaranteed to find an optimal solution
                  - or a solution with known closeness to optimality
            - with known efficiency
- AI Programming Techniques revolve around Heuristic Search
      - Heuristics are Procedures which
            - tend to find acceptable solutions to specific problems
            - where no sufficiently efficient algorithm is known

When a good Algorithm is known, use that instead of AI!

If you have a large complex problem, e.g creating an expert Chess Player
- Break the problem down into sub-problems
- Use conventional programming where possible
- Maybe some AI techniques will work for any remaining parts!

In computing, AI solutions are
- generally the worst solutions
- except when no other solutions are available
- or other solutions are not affordable!

When used appropriately, AI programming can /Sometimes/ be
- Effective
- Almost Magical!
