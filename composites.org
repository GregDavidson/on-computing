* Custom Data Structures: Composites
  
Read [[https://gregdavidson.github.io/on-computing/what-computers-are/][What Computers Are]] first!  Be sure and click on the Switches!

Now that you understand that everything in a computer program's memory is
*bits*, organized into *bytes*, organized into *words*, and you understand what
those are and what they can do for you on their own, it's time to put them
together, like Lego blocks, into larger structures to serve your larger needs.

/Objects/ are /Values/ stored in memory at specific locations. Objects occupy
some number of bytes. (/Objects/ have nothing to do with /Object-Oriented
Programming/ - that's something else!) Objects which are larger than a computer's
/Word Size/ are often called /Composite Objects/.

There are three common strategies for building /Composite Objects/:
- Put things next to one another in memory
      - Usually called /structures/ or /records/
- Connect things via their locations
      - /Lists/, /Trees/ and other /Graph Structures/
- Index things via content
      - /Hashes/, /Relations/ and Indexes

** Structures (aka Records) and Arrays

*** Dynamically Typed Structures aka Dynamically Typed Records

    Most dialects of Lisp let you create a new atom type made up of a fixed
    number of components. Structures of your new type can be distinguished from
    all other Lisp Types. Structures are usually created with a macro which
    creates a set of functions to manage your new type, e.g.
    - =(struct people (name contacts hobbies))=
    - creates five functions
          - the constructor =people= :: creates a /people structure/
                - given a /name/, contacts /list/ and /hobbies/ list
          - the discriminator =people?= :: takes a value and returns
                - #t (Boolean True) for /people structures/
                - #f (Boolean False) for anything else
                - /? is a conventional suffix for Boolean functions in Scheme/
          - the selectors =people-name=, =people-contacts=, =people-hobbies= ::
                - each take a people value and
                - return the value of their respective field (component)
          - there can optionally be mutator functions for changing field values
                - /functional programming/ discourages mutation
                - mutation makes programs harder to debug
          - =(eq? x y)= checks if =x= and =y= are the same /Object/
                - it simply checks their location in memory
                - location gives us the concept of /object identity/

#+begin_src racket
  #lang racket
  (struct people (name contacts hobbies))
  (struct company (name employees services))
  (define john (people "John From" '("General Delivery, Kansas City KS") '(travel)))
  (define dana (people "Dana From" '("+1 (203) 123-4567") '(reading)))
  (define nardles (company "Nardles, Inc." (list john dana) '(Nardles-Disposal)))
  (people? john) ; returns #t
  (people? nardles) ; returns #f
  (people-name john) ; returns "John From"
  (people-name nardles) ; error
  (company-name nardles) ; returns "Nardles, Inc."
  (map people-name (company-employees nardles)); returns '("John From" "Dana From")
#+end_src

Because a named function is created for each /field/ (structure component)
- the order of the elements doesn't matter
- new versions of a program can add new fields
- the number and layout of fields is fixed during a program execution
- removing or renaming a field will require corresponding changes throughout the program

Dynamically Typed languages, including most /Lisp/ dialects, /Python/ and
/JavaScript/ have to store the type of each object along with its value. This
provides for flexibility but can also increase complexity and reduce reliability
and efficiency.

*** (Manifestly) Typed Structures 

/Manifestly Typed/ structures explicitly specify which kind of data can be bound
to each field of the structure. This can be used to communicate as well as to
enforce the program designer's expectations and thus prevent bugs through
inconsistent use. It can also be used to compile (translate) the program to more
efficient machine code.

While most Lisp dialects are Dynamically Typed, Racket provides multiple
languages, some of which are Dynamically Typed and some of which are
(Manifestly) Typed. You can write all or part of a Racket program in /Typed
Racket/ for clarity, efficiency and reliability.

#+begin_src racket
  #lang typed/racket
  (struct contact ( (type : String) (value : Any) )
  (struct people ( (name : String)
                   (contacts : (ListOf contact))
                   (hobbies : (ListOf Symbol)) ))
  (struct company ( (name : String)
                    (employees : (ListOf people))
                    (services : (ListOf Symbol)) ))
  (define john
    (people "John From" (list (contact 'mail "General Delivery, Fargo City ND")) '(travel)) )
  (define dana
    (people "Dana From" (list (contact 'phone "+1 (203) 123-4567")) '(reading)) )
  (define nardles
    (company "Nardles, Inc." (list john dana) ("Nardles Disposal")) )
#+end_src

/SQL/ and /Object-Relational Databases/
- data lives in persistent memory over a long time
- needs to support many versions of many programs over time
- typed records and other constraints assist with data integrity
- automatic storage management
- relations usually multi-way for flexibility
- unique data gives object (record) identity
      - unique ids can be introduced where data values aren't unique

SQL gives the most explicit model of what data looks like in persistent storage,
i.e. storage that doesn't go away when your program(s) terminate.

#+begin_src sql
  CREATE ENUM contact_types (mail_contact, email_contact, phone_contact);
  CREATE TABLE people (
    people_id bigint PRIMARY_KEY,
    name text
   );
  CREATE TABLE people_contacts (
    people_id bigint REFERENCES people,
     contact_type contact_types NOT NULL,
     contact_value text NOT NULL
  );
  CREATE TABLE people_hobbies (
    people_id bigint REFERENCES people,
    contact_value text NOT NULL
  );
  CREATE TABLE companies (
    company_id serial PRIMARY_KEY,
    name text
  );
  CREATE TABLE companies_employees (
    company_id bigint REFERENCES companies,
    employee_id bigint REFERENCES people
  );
  CREATE TABLE companies_services (
    company_id bigint REFERENCES companies,
    service text NOT NULL
  );
  INSERT INTO people VALUES
     (1, "John From"),
     (2, "Dana From");
  INSERT INTO people_contacts VALUES
     (1, mail_contact, "General Delivery, Fargo City ND"),
     (2, phone_contact, "+1 (203) 123-4567");
  INSERT INTO people_hobbies VALUES
     (1, "travel"),
     (2, "reading");
  INSERT INTO companies VALUES
     (1, "Nardles, Inc.");
  INSERT INTO companies_employees VALUES
     (1, 1), (1, 2);
  INSERT INTO companies_services VALUES (1, "Nardles Disposal");
#+end_src

Systems languages like /C/ and /Rust/ are similar
- they require details of types and sizes of each element
- programmers are responsible for managing resources
      - including (de)allocation of objects
- It's easy to do this wrong in C - especially releasing resources
- Rust provides (partial) protection against doing this wrong!
- Relationships are usually customized to specific use-cases
      - 1-way relationships often provided by pointers (see below)
      - more efficient than SQL but more efficient

C gives the most explicit model of what data looks like in memory and what
algorithms cost.

#+begin_src C
  typedef char *String;
  enum ContactTypes {mail, email, phone, n_ContactTypes};
  typedef struct {
    ContactTypes contact;
    String value;
  } Contacts;
  typedef struct {
    String name;
    Contacts *contacts;           // points to NULL-terminated Array
    String *hobbies;              // points to NULL-terminated Array
  } People;
  typedef struct {
    String name;
    People *employees;            // points to NULL-terminated Array
    String *services;             // points to NULL-terminated Array
  } Companies;
  Contacts john_contacts[] = { {mail, "General Delivery, Fargo City ND"}, 0 };
  Hobbies john_hobbies[] = { "travel", 0 };
  Contacts dana_contacts[] = { {phone, "+1 (203) 123-4567"}, 0 };
  Hobbies dana_hobbies[] = { "reading", 0 };
  People john = {"John From" john_contacts, john_hobbies};
  People dana = {"Dana From" dana_contacts, dana_hobbies};
  People nardles_employees[] = {&john, &dana, 0};
  String nardles_services[] = {"Nardles Disposal", 0};
  Company nardles = {"Nardles, Inc.", nardles_employees, nardles_services};
#+end_src

*** Dynamically Typed Vector aka 1-dimensional Arrays

Lisps provide contiguous vectors (called arrays in many other languages).
Vectors are similar to Lists (described below with Linked Structures).
A vector can contain any number of elements which will fit in virtual memory,
but once created their size can't be changed without possibly reallocating the
whole vector.

In Scheme and many other Lisps
- vector constructors
      - like lists except with added =#= in front of the open parenthesis
            - =#(elem1 elem2 ... elemN)=
      - =vector= and =make-vector=
            - =(vector elem1 elem2 ... elemN)=
            - =(make-vector num-elements-desired default-value)=
                  - all elements will be initialized to /default-value/
- Other vector operations
      - =vector?= :: discriminator, returns #t for vectors or #f
      - =vector-length= :: returns number of elements
      - =(vector-ref vec pos)= :: returns element at position pos
            - pos goes from =0= to =(- (vector-length vec) 1)= for /reasons/
      - =(vector-set! vec pos v)= :: sets element at position pos to v
            - vector-set! modifies the vector
            - scheme-family Lisps use a ! after modifying functions
- Racket also has /immutable vectors/ which /do not/ support =vector=set!=

/Strings/ are usually implemented as a contiguous /array of bytes/. Modern
[[https://en.wikipedia.org/wiki/Unicode][Unicode]] accommodates text in all languages by allowing a single character to
occupy more than one byte, as needed.

Some languages provide /bit vectors/, i.e. a contiguous array of bits.

Most vectors consist of objects that are at least a full machine word long, e.g.
numbers, addresses and structures.

Vectors vs. Lists

| Feature           | List                            | Vector                       |
|-------------------+---------------------------------+------------------------------|
| Growable          | Cheap at front                  | Expensive                    |
| Space efficiency  | bulky                           | compact                      |
| Sequential access | next element often not in cache | next element likely in cache |
| Random access     | slow, O(n)                      | fast, O(1)                   |
| Mutability        | heavily discouraged             | lightly discouraged          |

Lisp programmers are encouraged to use /Lists/ and /Structs/ in their initial
program design and to consider /Vectors/ as an optimization only where profiling
analysis clearly indicates significant inefficiency in a place where /Vectors/
might be better.

*** (Manifestly) Typed Arrays 

It's common to want to have all of the elements of an array to be the same kind
of thing, i.e. to be of the same type. Arrays of pixels, customer records,
shapes, etc. It is actually quite unusual to have an array of elements of
arbitrarily varying types.
    
Typed Racket allows the programmer to specify the type of the elements of an
array to a specific type, including a limited set of alternative types.
    
Systems programming languages like C and Rust are strongly biased towards using
arrays whose elements are all of the same type. Also, arrays are usually easier
to create and manage than lists because the arrays are allocated and deallocate
as a whole whereas each element of a list is individually (de)allocated!

Many /Relation Database Systems/ lack arrays.
- /PostgreSQL/ supports both single and multidimensional arrays

** Linked Structures aka Graph Structures

Composite objects can be nested, e.g. you can have an array of structures within
which are other structures, some of whose fields are arrays, etc. This works
well as long as all of the component parts are of a known size (Manifest Types
and homogenous arrays) and as long as the whole composite object can be
allocated at once.  When you need more flexibility, you can link multiple objects
together using their addresses.
   
Every object in a running program has a unique /address/ (location) in memory.
Modern computers use /byte addresses/, i.e. they assign a unique address,
starting with =0=, to the location of every byte in memory. All of the kinds of
values discussed above can be stored in memory as objects of one or more
contiguous blocks of bytes. (For efficiency, the storage allocation of
independent objects is usually rounded up to an even number of words, e.g. on a
64-bit computer objects usually start and end at 8-byte (64-bit) boundaries.)

It's possible to create objects whose component parts are allocated at different
times in different parts of memory and components can even be shared as parts of
multiple conceptual composite objects.

In typed systems programming languages, such as C or Rust, the type of an
address of an object of type /T/ is /Pointer-to-T/, written =*T=. A pointer
value can be bound to a variable, stored as a field of a structure or an element
of an array. A pointer of type =*T= can be dereferenced (followed) to an object
of type =T= anywhere in memory.

Dynamic languages like Lisps, scripting languages such as Python, etc. make
maximum use of this facility. Variable bindings in Lisp are usually pointers.
Lists and dynamically typed arrays do not actually contain their elements, they
merely point to them. Dynamic languages (and even some statically-typed
languages, such as Java and C#) use an algorithm called /Garbage Collection/ to
periodically reclaim memory which can no longer be referenced which is called
/garbage/ because there's no longer a pointer to it to it. Programmers write
code as if there's an infinite amount of memory, and the garbage collector helps
maintain this convenient fiction! Advanced Garbage Collection algorithms can
even compact memory, moving objects and updating the pointers to them
seemlessly, even as the program continues to run

What's going on in the following Lisp code? How many times does the list ='(red
green blue)= exist in memory? How about the list ='(black red green blue)=?

#+begin_src racket
  #lang racket
  (define primaries '(red green blue))
  (define palette1 (cons 'white primaries))
  (define palette2 (cons 'black primaries))
  (define palette (cons 'white palette2))
  palette1 ; prints '(white red green blue)
  palette ; prints '(white black red green blue)
#+end_src

Let's look at the same program in C to find out:
#+begin_src C
  typedef char *StringPtr;
  typedef struct color_list {
    StringPtr color;
    struct color_list *list;
  }*ColorList;
  ColorList *consColor(StringPtr color, ColorList tail) {
    ColorList cons = malloc( sizeof (struct color_list) ); // sizes are in bytes
    cons->color = color;
    cons->tail = tail;
    return color;
  }
  ColorList primaries = consColor ("red", consColor("green", consColor("blue", 0)));
  ColorList palette1 = consColor("white", primaries);
  ColorList palette2 = consColor("black", primaries);
  ColorList palette = consColor("white", palette2);
  void printColorList(ColorList cl) {
    putchar('(');
    while (cl) { // 0 == NULL == false in C, everything else is true
      fputs(cl->color, stdout);
    if (cl->tail) putchar(' ');
    cl = cl->tail;
    }
    putchar(')');
  }
  int main() { // main is where execution begins in C
    fputs("* palette1:", stdout);
    printColorList(palette1); // (white red green blue)
    fputs("* palette2:", stdout);
    printColorList(palette2); // (black red green blue)
    fputs("* palette3:", stdout); // (white black red green blue)
    printColorList(palette);
    return 0; // all is well
  }
#+end_src

How many 2-word consColor nodes were allocated? When should the '(red green blue)
list be deallocated?

The Lisp function =cons= is the foundation of Lisp's Lists. It allocates a
structure called a /Pair/ or /cons cell/ which is two words long. A /cons cell/
contain two pointer fields, conventionally called =car= and =cdr=, aka =head=
and =tail= aka =first= and =rest=. Each =car= points to a single element of the
List while the =cdr= either contains a special value indicating an empty list,
or it points to the =cons= cell containing the rest of the list. Thus for every
n-element list, there will be 2*n worlds of memory storing the list. If you want
an element deeply buried in a long list, you have to start at the beginning and
follow the =cdr= pointers until you find the desired item.

** Hashes and Relations
   
***   Hashes

A program might run slowly if it often needs to examine many elements of a large
List or Array to find a desired item. This kind of search costs =O(n)= aka
/Order of n/ where /n/ is the number of elements which have to be examined.

A common solution is to organize the data as a sorted array or as a hierarchy
such as a tree. This allows for faster access. An alternative is to let the data
itself serve as a quick way to find it.  The data can be turned into a /hash/ and the
/hash/ can be turned into an /index/.

Program designers often put a lot of work into storing data in such a way that
access and updating of the data will be very fast. This often leads to complex
code which can hide bugs. Its actually quite difficult to predict in advance
what will be the most efficient storage layout for data. The best practice is to
program for clarity rather than efficiency. Once the program has all of its
desired features, if it runs too slowly there are tools called /profilers/ that
can help the programmer find the performance bottlenecks, i.e. the (usually very
small) parts of the code which need to be sped up.

Conventional programmers following good practice will then redesign only the
parts of the program that are performance bottlenecks to use a more efficient
data structure (the way storage is arranged in memory) or algorithm (the
strategy of the program's procedures). This way the overall complexity of the
program is minimized. But there may be a better way!

***   Relations

Relational databases were designed to store data over long periods of time in
the simplest and most general manner possible, so that the data can be used by
many versions of many programs over time. You can think of relational data as
being Tables of Records which are laid out in secondary (persistent) storage in
a manner very similar to unordered arrays of structures in the volatile memory
of a computer. While this is very simple and general, it can be expensive to
work with when the computer has to search through large tables to find the
desired data.

Rather than complicating the Tables, Relational Database Systems allow the Database
Administrator to /profile/ the database's operations to identify /performance bottlenecks/ and
add /Indexes/ to speed up performance for specific /use cases/.
    
***   Indexes

An index is a data structure which provides fast access to the elements of an
unordered table or array without changing the structure of the table or array.
You can use an Index in a regular program to provide fast access to the elements
of a vector or array. Indexes are most known in the context of databases where
they provide fast access to desired records of tables. Index in programs are
generally designed as part of the program, as an alternative to using a more
compalex data structure.

In the database context, indexes can be added or removed by an administrator as
the access patterns of the database system change over time. Index have to be
updated as records are added (or changed), so having too many indexes can itself
slow things down.

The advantage of Indexes is that they exist independent of the simple storage layout
of the data they support.  This decreases overall complexity.

So how do Indexes work?

Programs generally select desired records based on the values of one or a few
fields. These are called /search keys/.

There are two basic strategies: Trees and Hashes.
  
If these keys can be efficiently ordered, e.g. if for any two keys /K1/ and /K2/
we can efficiently determine whether /K1/ < /K2/, /K1/ = /K2/ or /K1/ > /K2/,
then we can construct an /Ordered Tree Index/ which will access the desired
records in logarithmic time.

Alternatively, we can use a hash.  A hash is an integer value which can be computed
from a key.  A good has should be
- fast to compute
- no larger than twice the number of elements to be stored
- almost always unique

Suppose you have around n=1,000,000 records in a table. You want a function
=hash(k1)= (or =hash(k1, k2, ... kn)= if there are multiple keys) which returns
an integer in the range 0 to 2*n. It needs to be rare for =hash(k1)= to have the
same value as =hash(k2)= when =k1= is not the same as =k2=. The hash index is
simply an array indexed by the hash values which gives the location of the
desired record in the table. There's extra room in the table, so in the case of
a /collision/, i.e. where two keys give the same hash value, we can simply store
one of them in the regular place and the other in the next free available
element of the index array. Since collisions are rare (by design of the hash
function), having to occasionally look again will not slow things down much.

Some database systems can sometimes automatically figure out when indexes should
be used and which kind.  They can usually figure out an appropriate ordering function
or hash function for keys.  However, they are sometimes unable to figure out the best
kind of index or an appropriate ordering or hash function.  All of these things can
be explicitly provided by a Database Administrator as needed.
