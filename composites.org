* Custom Data Structures: Composites

If you're not 100% clear on how memory consists of
- bits, bytes and words
- read [[https://gregdavidson.github.io/on-computing/what-computers-are/][What Computers Are, Part 1]] first!
      - Be sure and click on the Switches!

Now that you understand that everything in a computer program's memory is
*bits*, organized into *bytes*, organized into *words*, and you understand what
those are and what they can do for you on their own, it's time to put them
together, like Lego blocks, into larger structures to serve your larger needs.

Please note that parts of this document are still in a draft state, especially
the parts starting with on "Hashes and Relations" and "Indexes for Performance".
We always appreciate your feedback and assistance! Feel free to post /issues/
and to clone this repository and submit /pull requests/!

** Basic Strategies

/Objects/ are /Values/ stored in memory at specific locations. Objects occupy
some number of bytes. Objects which are larger than a computer's /Word Size/ are
often called /Composite Objects/. /Objects/ which have an Identity are sometimes
part of /Object-Oriented Programming/ systems, but we're going to ignore that
level of complexity for now.

There are three common strategies for building /Composite Objects/:
- Put things next to one another in memory
      - /structures/ aka /records/ contain a fixed number of named /fields/
            - can have multiple records with the same field layout
      - /vectors/ aka /arrays/ contain a fixed number of /elements/ indexed by integers
            - it may be possible to add elements to a vector
- Connect things via their locations
      - /Lists/, /Trees/ and other /Graph Structures/
- Index things via content
      - /Hashes/, /Relations/ and Indexes

*** A Note About Procedures:

A procedure is a module of a program's behavior consisting of
- An /interface/ specifying
      - any required or optional /arguments/
      - possible /return values/
- Code (instuctions) which can /perform operations/ i.e. do something

A procedure's code doesn't run until the procedure is
- /called/ (aka /invoked/) by another procedure
- which supplies any required arguments
A procedure can be called as many times as desired.

When the procedure is invoked the procedure's code can make use of
- parameters -- initialized by the provided arguments
- [optionally] other data available from outside of the procedure
- [optionally] /side-effects/
      - modifying data stored outside of the procedure
      - performing Input/Output operations
      - otherwise interacting with systems outside of the procedure

A /functional procedure/ is a procedure
- which does NOT have /side-effects/
- it computes and returns 1 or more values from its arguments

In various programming language cultures, the word /function/ can mean
- a mathematical function
      - which might be implemented with a procedure
- a functional procedure
- any /procedure/, i.e. the two terms are synonyms

We try to avoid
- using the word /function/ for a /procedure/ with /side-effects/

/Functional Programming/ is a powerful computing paradigm
- centered around functional procedures
- prohibiting procedures with /side-effects/

** Structures (aka Records) and Arrays

*** Dynamically Typed Structures aka Dynamically Typed Records

Most dialects of Lisp let you create a new atom type made up of a fixed
number of components. Structures of your new type can be distinguished from
all other Lisp Types. Structures are usually created with a macro which
creates several custom procedures to manage your new type, e.g.
- =(struct people (name contacts hobbies))=
- creates five procedures
- the constructor =people= :: creates a /people structure/
- given a /name/, a /contacts/ list and a /hobbies/ list
- the discriminator =people?= :: takes a value and returns
- #t (Boolean True) for /people structures/
- #f (Boolean False) for anything else
- /the suffix ? is part of the name of the procedure/
      - /suggesting that the procedure returns a Boolean value/
- the selectors =people-name=, =people-contacts=, =people-hobbies= :: each
- takes a value of type =people=
- returns the value of the respective field (component)
- [optionally] there can be mutator procedures for changing field values
      - a mutation is a /side-effect/
      - modern /functional programming/ discourages mutations
      - /mutations makes programs harder to debug/
- =(eq? x y)= checks if =x= and =y= are the same /Object/
- it simply checks their location in memory
      - location provides a concept of /object identity/

#+begin_src racket
#lang racket
(struct people (name contacts hobbies))
(struct company (name employees services))
(define john (people "John From" '("General Delivery, Kansas City KS") '(travel)))
(define dana (people "Dana From" '("+1 (203) 123-4567") '(reading)))
(define nardles (company "Nardles, Inc." (list john dana) '(Nardles-Disposal)))
(people? john) ; returns #t
(people? nardles) ; returns #f
  (people-name john) ; returns "John From"
  (company-name nardles) ; returns "Nardles, Inc."
  (map people-name (company-employees nardles)); returns '("John From" "Dana From")
  #;  (people-name nardles) ; runtime error
  (define widgets (company "Widgets, Inc." '("Big Boss" "Lowly Peon") '("3D Printing")))
  ;; What would go wrong with this code:
  #;(map people-name (company-employees widgets))
  ;; What needs to be fixed?
#+end_src

*#+RESULTS:*
: #t
: #f
: "John From"
: "Nardles, Inc."
: '("John From" "Dana From")

Because a named procedure is created for each /field/ (structure component)
- the order of the elements doesn't matter
- new versions of a program can add new fields
- the number and layout of fields is fixed during a program execution
- removing or renaming a field will require corresponding changes throughout the program

Dynamically Typed languages, including most /Lisp/ dialects, /Python/ and
/JavaScript/ have to store the type of each object along with its value. This
provides for flexibility but can also increase complexity and reduce reliability
and efficiency.

*** (Manifestly) Typed Languages and Structures

In a /Manifestly Typed/ language, the type of every expression is Manifest in
the Source Code, without having to run the program or otherwise evaluate the
expression. For example, you might know that symbol =count= will always be bound
to, e.g. some /whole number/ and that symbol =name= will always be bound to some
/character string/, though you won't know /what number/ or /what string/ they
are bound to until you run the program, and the actual values might vary
depending on program input, etc. /Manifestly Typed Languages/ are also called
/Statically Typed Languages/ but are usually just called /Typed
Languages/ even though /Dynamically Typed Languages/ also have types.

In a /Typed Language/ the program's high-level language /source code/ specifies
which type of data can be associated with any identifier and the type of each
component of each composite object. Manifest types can be used both to
communicate and to enforce the program designer's expectations and thus prevent
bugs through misunderstandings and inconsistent usage. It can also be used to
compile (translate) the program into more efficient machine code.

While most Lisp dialects are Dynamically Typed, Racket provides multiple
languages, some of which are Dynamically Typed and some of which are
(Manifestly) Typed. You can write all or part of a Racket program in /Typed
Racket/ for increased clarity, efficiency and reliability.

#+begin_src racket
  #lang typed/racket
  (struct phone ([country : Integer] [number : String]))
  (struct post ([addressee : String] [address : String]))
  (define-type contact (U phone post))
  (struct people ( [name : String]
                   [contacts : (Listof contact)]
                   [hobbies : (Listof Symbol)] ))
  (struct company ( [name : String]
                    [employees : (Listof people)]
                    [services : (Listof String)] ))
  (define john
    (people "John From"
            (list (post "General Delivery" "Fargo City ND"))
            '(travel) ) )
  (define dana
    (people "Dana From"
            (list (phone 1 "(203) 123-4567"))
            '(reading) ) )
  (define nardles
    (company "Nardles, Inc."
             (list john dana)
             (list "Nardles Disposal") ) )
  (people? john) ; returns #t
  (people? nardles) ; returns #f
  (people-name john) ; returns "John From"
  (company-name nardles) ; returns "Nardles, Inc."
  (map people-name (company-employees nardles)); returns '("John From" "Dana From")
  ;; A compile-time error will prevent the program from being run at all
  ;; if you uncomment this erroneous form:
  ;; (people-name nardles) ; compile-time error
#+end_src

*#+RESULTS:*
: #t
: #f
: "John From"
: "Nardles, Inc."
: '("John From" "Dana From")

Ideally we would refine the types based on String and Symbol to more specific
types, and perhaps add some constraints on the permitted values.

** Persistence

When a program terminates, everything stored in its program memory is lost.

Persistent data
- may live longer than the run-time of the programs using it
- may need to be accessed or modified by different programs over time

*** Persistence: Serialization to Files or Sockets

Serialization is the conversion of data in main (volatile) memory into byte
sequences which can be, e.g. written to a file or a socket.

De-Serialization is the conversion of byte sequences into data structures in
main memory which are equivalent to the original data structures which were
serialized to create those byte sequences.

The obvious way to achieve this as a programmer is
- For each data structure in your program
- Write a serialization and a de-serialization procedure

Sophisticated languages often provide libraries which can write your
serialization and de-serialization procedures automatically.

But the structure of your data tends to change
- as your program evolves
- when you recompile your programs
- when you run it on a different model of CPU
- etc.

Your carefully preserved data can easily become garbage!

*** Persistence: /SQL/ and /Object-Relational Databases/

Once again: Persistent data
- may live longer than the run-time of the programs using it
- needs to support many versions of many programs over time
      - including simultaneous usage by multiple programs

Relational Databases are designed for exactly this need!

The Relational View of Data
- A Relation is a set of /Records/
- /Records/ are the database equivalent of /Structures/
      - They consist of named and typed /Fields/
- A /Table/ is a /Persistently Stored Relation/
- /Constraints/, including Types, assist with data integrity
- The database storage engine provides
      - efficient automatic storage management
      - efficient backup and distribution of data
- The database query engine provides
      - efficient retrieval of selected data
      - efficient updates when data needs to change
- Unique Fields in a Set provide Object (Record) Identity
      - Unique ids can be added when other Fields aren't unique

/SQL/ is a language for writing
- Schemas which define your data along with types and constraints
- Queries which allow you to flexibly and efficiently retrieve your data

Programs written in any Programming Language can use /SQL/ for all of their
persistence needs.

A Relational Database can often entirely replace a specialized Server Program!

#+begin_src sql
  CREATE TYPE contact_types AS ENUM
    (mail_contact, email_contact, phone_contact);
  CREATE TYPE employee_roles AS ENUM
    (partner, salaried, hourly);
  CREATE TABLE people (
    people_id bigint PRIMARY_KEY,
    name text
    );
  CREATE TABLE people_contacts (
    people_id bigint REFERENCES people,
      contact_type contact_types NOT NULL,
      contact_value text NOT NULL
  );
  CREATE TABLE people_hobbies (
    people_id bigint REFERENCES people,
    contact_value text NOT NULL
  );
  CREATE TABLE companies (
    company_id serial PRIMARY_KEY,
    name text
  );
  CREATE TABLE companies_employees (
    company_id bigint REFERENCES companies NOT NULL,
    employee_id bigint REFERENCES people NOT NULL,
    employee_role employee_roles NOT NULL;
  );
  CREATE TABLE companies_services (
    company_id bigint REFERENCES companies,
    service text UNIQUE NOT NULL
  );
  INSERT INTO people VALUES
      (1, 'John From'),
      (2, 'Dana From');
  INSERT INTO people_contacts VALUES
      (1, mail_contact, 'General Delivery, Fargo City ND'),
      (2, phone_contact, '+1 (203) 123-4567');
  INSERT INTO people_hobbies VALUES
      (1, 'travel'),
      (2, 'reading');
  INSERT INTO companies VALUES
      (1, 'Nardles, Inc.');
  INSERT INTO companies_employees VALUES
      (1, 1, 'partner'::employee_roles), (1, 2, 'salaried::employee_roles);
  INSERT INTO companies_services VALUES (1, 'Nardles Disposal');
#+end_src

** Systems Programming Languages

Systems Programming Languages like /C/ and /Rust/ are designed to compile to
efficient machine code which can do anything the machine can do without
requiring support from any additional software, e.g. garbage collectors,
interpreters, etc. This makes them perfect for implementing higher-level
languages, libraries, operating systems, device drivers, etc.

Systems languages like /C/ and /Rust/ face similar challenges
- they require details of types and sizes of each element
- programmers are responsible for managing resources
      - including (de)allocation of objects
- It's easy to do this wrong in C - especially releasing resources
- Rust provides (partial) protection against doing this wrong!
- Relationships are usually customized to specific use-cases
      - 1-way relationships often provided by pointers (see below)
      - more efficient than SQL but less flexible

C gives the most explicit model of what data looks like in memory and what
algorithms cost.

#+begin_src C
  typedef char *String;
  enum ContactTypes {mail, email, phone, n_ContactTypes};
  typedef struct {
    ContactTypes contact;
    String value;
  } Contacts;
  typedef struct {
    String name;
    Contacts *contacts;           // points to NULL-terminated Array
    String *hobbies;              // points to NULL-terminated Array
  } People;
  typedef struct {
    String name;
    People *employees;            // points to NULL-terminated Array
    String *services;             // points to NULL-terminated Array
  } Companies;
  Contacts john_contacts[] = { {mail, "General Delivery, Fargo City ND"}, 0 };
  Hobbies john_hobbies[] = { "travel", 0 };
  Contacts dana_contacts[] = { {phone, "+1 (203) 123-4567"}, 0 };
  Hobbies dana_hobbies[] = { "reading", 0 };
  People john = {"John From" john_contacts, john_hobbies};
  People dana = {"Dana From" dana_contacts, dana_hobbies};
  People nardles_employees[] = {&john, &dana, 0};
  String nardles_services[] = {"Nardles Disposal", 0};
  Company nardles = {"Nardles, Inc.", nardles_employees, nardles_services};
#+end_src

** Sequences: Lists, Vectors, Arrays and More

When you need to manage a collection of values (or objects) the most popular
programming data structure is the vector or 1-dimensional array.

Dynamically Typed Vectors allow storing values of different types together in
the same vector.

Manifestly (Statically) Typed Vectors require that all of the elements of a
particular Vector be of the same Type.

Some Languages, e.g. Ada, Julia and SQL, provide explicit support for
multidimensional arrays. Other languages require the programmer to simulate
multidimensional arrays in various ways.

An alternative to Vectors is the very flexible (but usually less efficient)
/Linked List/ which is especially popular in Functional, Logical and Lisp-Family
languages.

Most Lisp dialects (and some other languages) provide /Sequence Operators/ which
can operate on any kind of data organized as a /Sequence/ of values, including
Lists, Vectors and other more exotic kinds of sequences.

*** Dynamically Typed Vectors

Lisps provide contiguous vectors (called arrays in many other languages).
Vectors are similar to Lists (described below with Linked Structures).
A vector can contain any number of elements which will fit in virtual memory,
but once created their size can't be changed without possibly reallocating the
whole vector.

In Scheme and many other Lisps
- vector constructors
      - like lists except with added =#= in front of the open parenthesis
            - =#(elem1 elem2 ... elemN)=
      - =vector= and =make-vector=
            - =(vector elem1 elem2 ... elemN)=
            - =(make-vector num-elements-desired default-value)=
                  - all elements will be initialized to /default-value/
- Other vector operations
      - =vector?= :: discriminator, returns =#t= for vectors, =#f= for anything else
      - =vector-length= :: returns number of elements
      - =(vector-ref vec pos)= :: returns element at position pos
            - pos goes from =0= to =(- (vector-length vec) 1)= for /reasons/
      - =(vector-set! vec pos v)= :: sets element at position pos to v
            - vector-set! modifies (mutates) the vector
            - Scheme naming convention uses ! suffix for names of mutating procedures
- Racket also has /immutable vectors/ which /do not/ support =vector-set!=

/Strings/ are usually implemented as a contiguous /array of bytes/. Modern
[[https://en.wikipedia.org/wiki/Unicode][Unicode]] accommodates text in all languages by allowing a single character to
occupy more than one byte, as needed.

Some languages provide /bit vectors/, i.e. a contiguous array of bits.

Most vectors consist of objects that are at least a full machine word long, e.g.
numbers, addresses and structures.

Vectors vs. Lists

| Feature           | List                            | Vector                       |
|-------------------+---------------------------------+------------------------------|
| Growable          | Cheap at front                  | Expensive                    |
| Space efficiency  | bulky                           | compact                      |
| Sequential access | next element often not in cache | next element likely in cache |
| Random access     | slow, O(n)                      | fast, O(1)                   |
| Mutability        | heavily discouraged             | lightly discouraged          |

Lisp programmers are encouraged to use /Lists/ and /Structs/ in their initial
program design and to consider /Vectors/ as an optimization only where profiling
analysis clearly indicates significant inefficiency in a place where /Vectors/
might be better.

*** (Manifestly) Typed Arrays

It's common to want to have all of the elements of an array to be the same kind
of thing, i.e. to be of the same type. Arrays of pixels, customer records,
shapes, etc. It is actually quite unusual to have an array of elements of
arbitrarily varying types.

[[https://docs.racket-lang.org/ts-guide/][Typed Racket]] allows the programmer to specify the type of the elements of an
array to a specific type, including a limited set of alternative types.

Systems programming languages like C and Rust are strongly biased towards using
arrays whose elements are all of the same type. Arrays are usually allocated and
deallocated as a whole whereas each element of a list needs to be individually
(de)allocated, which is difficult in languages lacking automatic garbage
collection (explained below).

Many /Relational Database Systems/ lack arrays.
- /PostgreSQL/ supports both single and multidimensional arrays

** Linked Structures aka Graph Structures

Composite objects can be nested, e.g. you can have an array of structures within
which are other structures, some of whose fields are arrays, etc. nesting
without limit. This works well as long as all of the component parts are of a
known size (Manifest Types and homogeneous arrays) and as long as the whole
composite object can be allocated at once. When you need more flexibility, you
can link multiple objects together using their addresses.

Every object in a running program has a unique /address/ (location) in memory.
Modern computers use /byte addresses/, i.e. they assign a unique address,
starting with =0=, to the location of every byte in memory. All of the kinds of
values discussed above can be stored in memory as objects of one or more
contiguous blocks of bytes. (For efficiency, the storage allocation of
independent objects is usually rounded up to an even number of words, e.g. on a
64-bit computer objects usually start and end at 8-byte (64-bit) boundaries.)

It's possible to create objects whose component parts are allocated at different
times in different parts of memory and components can even be shared as parts of
multiple conceptual composite objects.

In typed systems programming languages, such as C or Rust, the type of an
address of an object of type /T/ is /Pointer-to-T/, written =*T=. A pointer
value can be bound to a variable, stored as a field of a structure or an element
of an array - it's usually a 1-word value. A pointer of type =*T= can be
dereferenced (followed) to an object of type =T= regardless of where its stored
in that task's main memory.

Dynamic languages like Lisps, scripting languages such as Python, etc. make
maximum use of the flexibility of linked data. Variable bindings in Lisp are
usually pointers. Lists and dynamically typed arrays do not actually contain
their elements, they merely point to them. Dynamic languages (and even some
statically-typed languages, such as Java and C#) use an algorithm called
/Garbage Collection/ to periodically reclaim memory which can no longer be
referenced which is called /garbage/ because there's no longer a pointer to it
to it. Programmers write code as if there's an infinite amount of memory, and
the garbage collector helps maintain this convenient fiction! Advanced Garbage
Collection algorithms can even compact memory, moving objects and updating the
pointers to them seemlessly, even as the program continues to run

What's going on in the following Lisp code? How many times does the list ='(red
green blue)= exist in memory? How about the list ='(black red green blue)=?

#+begin_src racket
  #lang racket
  (define primaries '(red green blue))
  (define palette1 (cons 'white primaries))
  (define palette2 (cons 'black primaries))
  (define palette (cons 'white palette2))
  palette
#+end_src

*#+RESULTS:*
| white | black | red | green | blue |

Let's look at the same program in C for a lower-level view:
#+begin_src C
  typedef char *StringPtr;
  typedef struct color_list {
    StringPtr color;
    struct color_list *list;
  }*ColorList;
  ColorList *consColor(StringPtr color, ColorList tail) {
    ColorList cons = malloc( sizeof (struct color_list) ); // sizes are in bytes
    cons->color = color;
    cons->tail = tail;
    return color;
  }
  ColorList primaries = consColor ("red", consColor("green", consColor("blue", 0)));
  ColorList palette1 = consColor("white", primaries);
  ColorList palette2 = consColor("black", primaries);
  ColorList palette = consColor("white", palette2);
  void printColorList(ColorList cl) {
    putchar('(');
    while (cl) { // 0 == NULL == false in C, everything else is true
      fputs(cl->color, stdout);
    if (cl->tail) putchar(' ');
    cl = cl->tail;
    }
    putchar(')');
  }
  int main() { // main is where execution begins in C
    fputs("* palette1:", stdout);
    printColorList(palette1); // (white red green blue)
    fputs("* palette2:", stdout);
    printColorList(palette2); // (black red green blue)
    fputs("* palette3:", stdout); // (white black red green blue)
    printColorList(palette);
    return 0; // all is well
  }
#+end_src

How many 2-word consColor nodes were allocated? When should the '(red green blue)
list be deallocated?

The Lisp procedure =cons= is the foundation of Lisp's Lists. It allocates a
structure called a /Pair/ or /cons cell/ which is two words long. A /cons cell/
contain two pointer fields, conventionally called =car= and =cdr=, aka =head=
and =tail= aka =first= and =rest=. Each =car= points to a single element of the
List while the =cdr= either contains a special value indicating an empty list,
or it points to the =cons= cell containing the rest of the list. Thus for every
n-element list, there will be 2*n worlds of memory storing the list. If you want
an element deeply buried in a long list, you have to start at the beginning and
follow the =cdr= pointers until you find the desired item.

** Hashes and Relations

***   Hashes

A program might run slowly if it often needs to examine many elements of a large
List or Array to find a desired item. This kind of search costs =O(n)= aka
/Order of n/ where /n/ is the number of elements which have to be examined.

A common solution is to organize the data as a sorted array or as a hierarchy
such as a tree. This allows for faster access. An alternative is to let the data
itself serve as a quick way to find it.  The data can be turned into a /hash/ and the
/hash/ can be turned into an /index/.

Program designers often put a lot of work into storing data in such a way that
access and updating of the data will be very fast. This often leads to complex
code which can hide bugs. Its actually quite difficult to predict in advance
what will be the most efficient storage layout for data. The best practice is to
program for clarity rather than efficiency. Once the program has all of its
desired features, if it runs too slowly there are tools called /profilers/ that
can help the programmer find the performance bottlenecks, i.e. the (usually very
small) parts of the code which need to be sped up.

Conventional programmers following good practice will then redesign only the
parts of the program that are performance bottlenecks to use a more efficient
data structure (the way storage is arranged in memory) or algorithm (the
strategy of the program's procedures). This way the overall complexity of the
program is minimized. But there may be a better way!

** Indexes for Performance

An index is a data structure which provides fast access to the elements of an
unordered table or array without changing the structure of the table or array.
You can use an Index in a regular program to provide fast access to the elements
of a vector or array. Indexes are most known in the context of databases where
they provide fast access to desired records of tables. Index in programs are
generally designed as part of the program, as an alternative to using a more
compalex data structure.

In the database context, indexes can be added or removed by an Administrator as
the access patterns of the database system change over time. Indexes have to be
updated as records are added (or changed), and although this is done
automatically, having many indexes can slow things down if data is frequently
changing.

Unlike in regular programming, a Database Developer doesn't have to know how
their database will be used. They just need to describe the data's logical
relationships in as simple and general a manner as possible.

Database Administrators will periodically /profile/ the database's operations to
identify /performance bottlenecks/ and add (or remove) /Indexes/ to speed up
performance for current /use cases/. Thus a database can be efficient over a
very long period of time.

The advantage of Indexes is that they exist independent of the simple storage layout
of the data they support.  This decreases overall complexity.

*** So how do Indexes work?

Relational Databases hide most of the details of Indexes, but it's sometimes
useful to have a sense of what's actually going on. This understanding can also
allow you to use /Indexes/ in regular programming.

Programs generally select desired records based on the values of one or a few
fields. These are called /search keys/.

There are two basic strategies: Trees and Hashes.

If these keys can be efficiently ordered, e.g. if for any two keys /K1/ and /K2/
we can efficiently determine whether /K1/ < /K2/, /K1/ = /K2/ or /K1/ > /K2/,
then we can construct an /Ordered Tree Index/ which will access the desired
records in /Logarithmic Time/.

Alternatively, we can use a /hash/. A hash is an integer value which can be
computed from a key. A good hash should be
- fast to compute
- dense
      - allowing the /hash indec/ (see below) to be at least half full
- almost always unique
      - minimizing /hash collisions/

Suppose you have around n=1,000,000 records in a table.
- You want a procedure =hash(k1)=
      - (or =hash(k1, k2, ... kn)= if there are multiple keys)
- which returns an integer in the range 0 to 2*n

It needs to be rare for =hash(k1)= to have the same value as =hash(k2)= when
=k1= is not the same as =k2=.

The /hash index/ is simply an array indexed by the hash values which gives the
location of the desired record in the table.

There's extra room in the table, so in the case of a /collision/, i.e. where two
keys give the same hash value, we can simply store one of them in the regular
place and the other in the next free available element of the index array. Since
collisions are rare (by design of the hash function), having to occasionally
look again will not slow things down much.

Some database systems can sometimes automatically figure out when indexes should
be used and which kind.  They can usually figure out an appropriate ordering function
or hash function for keys.  However, they are sometimes unable to figure out the best
kind of index or an appropriate ordering or hash function.  All of these things can
be explicitly provided by a Database Administrator as needed.

** More to Come - Ignore for Now!

Strategies for building larger, more interesting objects
- Larger objects with adjacent components
      - arrays and structures
- Graph structures connected by pointers
      - Lists, Trees and much more!
- Hash structures - much like crypto!
      - Dictionaries, Indexes
- Procedural interfaces
      - Dynamic computing
      - Metaprogramming
      - Procedures are also Data!
- Byte sequences are the interchange format
      - Files, Streams
      - (De)Serialization
- Alignment and chunking
      - Ideally invisible, sometimes leaks into APIs
      - Pages, Sectors, Blocks, Cylinders
      - Cache lines, Word alignment
      - Can impact efficiency
      - Strive for simplicity, with later optimization possible
